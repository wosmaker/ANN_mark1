#:kivy 1.0.9

<Obstacle>:
    group: 'obs'
    pos: self.pos
    size: self.size
    canvas:
        Color:
            rgba: 0, 0, 0, 1
        Rectangle:
            pos: self.pos
            size: self.size
        Color:
            rgba: 0.114, 0.149, 0.357, 1
        Rectangle:
            size: self.width - 4, self.height - 4
            pos: self.x + 2, self.y + 2

<Objective>:
    group: 'obj'
    pos: self.pos
    size: self.size
    canvas:
        Color:
            rgba: 0, 0, 0, 0.7
        Rectangle:
            pos: self.pos
            size: self.size
        Color:
            rgba: 0.976, 0.047, 0.635, 0.67
        Rectangle:
            size: self.width - 4, self.height - 4
            pos: self.x + 2, self.y + 2

<Robot>:
    direction: 0
    size: 20, 20
    pos: self.pos
    color: (0.7, 0, 0, 1)
    canvas.before:
        PushMatrix
        Rotate:
            angle: 360 - self._direction
            origin: self.center

        Color:
            rgba: self.color
        Ellipse:
            pos: self.pos
            size: self.size
        
        Color:
            rgba: 1, 1, 1, 1
        Ellipse:
            pos: self.x + 2, self.y + 2
            size: 16, 16

        Color:
            rgba: 0, 0, 0, 1
        Line:
            width: 2
            points: self.center_x, self.center_y , self.center_x + 10, self.center_y

    canvas.after:
        PopMatrix

<PySimbotMap>:
    pos: 0, 0
    # size: 700, 600
    size_hint: None, None
    canvas:
        Color:
            rgba: 1, 0.78, 0.78, 0.5
        Rectangle:
            pos: self.pos
            size: self.size

<Simbot>:
    orientation: 'horizontal'
    size_hint: None, None
    size: 900, 600
    canvas:
        Color:
            rgba: 0.7, 0.7, 0.7, 1
        Rectangle:
            pos: self.pos
            size: self.size

    Label:
        id: 'lbl_description'
        text: 'Simulation Count: ' + str(root.simulation_count) + '\nTime: '+ str(root.iteration) + '\nEat: ' + str(root.eat_count) + '\nFood Moved: ' + str(root.food_move_count) + '\nCollisions: ' + str(root.collision_count) + '\nScore: ' + str(root.score) + '%\n\n----------------------\n[Shortcuts]\nn: to change the food position'
        text_size: self.size
        padding: (15, 10)
        halign: 'left'
        valign: 'top'